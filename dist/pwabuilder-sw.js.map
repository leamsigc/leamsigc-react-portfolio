{"version":3,"sources":["pwabuilder-sw.js"],"names":["CACHE","offlineFallbackPage","self","addEventListener","event","console","log","waitUntil","caches","open","then","cache","add","Response","request","method","respondWith","fetch","response","url","updateCache","clone","catch","error","fromCache","match","matching","status","Promise","reject","put"],"mappings":"AAEA,IAAMA,KAAK,GAAG,oBAAd,EAEA;;AACA,IAAMC,mBAAmB,GAAG,YAA5B,EAEA;;AACAC,IAAI,CAACC,gBAAL,CAAsB,SAAtB,EAAiC,UAAUC,KAAV,EAAiB;AAChDC,EAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AAEAF,EAAAA,KAAK,CAACG,SAAN,CACEC,MAAM,CAACC,IAAP,CAAYT,KAAZ,EAAmBU,IAAnB,CAAwB,UAAUC,KAAV,EAAiB;AACvCN,IAAAA,OAAO,CAACC,GAAR,CAAY,kDAAZ;;AAEA,QAAIL,mBAAmB,KAAK,6BAA5B,EAA2D;AACzD,aAAOU,KAAK,CAACC,GAAN,CAAU,IAAIC,QAAJ,CAAa,kFAAb,CAAV,CAAP;AACD;;AAED,WAAOF,KAAK,CAACC,GAAN,CAAUX,mBAAV,CAAP;AACD,GARD,CADF;AAWD,CAdD,GAgBA;;AACAC,IAAI,CAACC,gBAAL,CAAsB,OAAtB,EAA+B,UAAUC,KAAV,EAAiB;AAC9C,MAAIA,KAAK,CAACU,OAAN,CAAcC,MAAd,KAAyB,KAA7B,EAAoC;AAEpCX,EAAAA,KAAK,CAACY,WAAN,CACEC,KAAK,CAACb,KAAK,CAACU,OAAP,CAAL,CACGJ,IADH,CACQ,UAAUQ,QAAV,EAAoB;AACxBb,IAAAA,OAAO,CAACC,GAAR,CAAY,8CAA8CY,QAAQ,CAACC,GAAnE,EADwB,CAGxB;;AACAf,IAAAA,KAAK,CAACG,SAAN,CAAgBa,WAAW,CAAChB,KAAK,CAACU,OAAP,EAAgBI,QAAQ,CAACG,KAAT,EAAhB,CAA3B;AAEA,WAAOH,QAAP;AACD,GARH,EASGI,KATH,CASS,UAAUC,KAAV,EAAiB;AACtBlB,IAAAA,OAAO,CAACC,GAAR,CAAY,uEAAuEiB,KAAnF;AACA,WAAOC,SAAS,CAACpB,KAAK,CAACU,OAAP,CAAhB;AACD,GAZH,CADF;AAeD,CAlBD;;AAoBA,SAASU,SAAT,CAAmBV,OAAnB,EAA4B;AAC1B;AACA;AACA;AACA,SAAON,MAAM,CAACC,IAAP,CAAYT,KAAZ,EAAmBU,IAAnB,CAAwB,UAAUC,KAAV,EAAiB;AAC9C,WAAOA,KAAK,CAACc,KAAN,CAAYX,OAAZ,EAAqBJ,IAArB,CAA0B,UAAUgB,QAAV,EAAoB;AACnD,UAAI,CAACA,QAAD,IAAaA,QAAQ,CAACC,MAAT,KAAoB,GAArC,EAA0C;AACxC,eAAOC,OAAO,CAACC,MAAR,CAAe,UAAf,CAAP;AACD;;AAED,aAAOH,QAAP;AACD,KANM,CAAP;AAOD,GARM,CAAP;AASD;;AAED,SAASN,WAAT,CAAqBN,OAArB,EAA8BI,QAA9B,EAAwC;AACtC,SAAOV,MAAM,CAACC,IAAP,CAAYT,KAAZ,EAAmBU,IAAnB,CAAwB,UAAUC,KAAV,EAAiB;AAC9C,WAAOA,KAAK,CAACmB,GAAN,CAAUhB,OAAV,EAAmBI,QAAnB,CAAP;AACD,GAFM,CAAP;AAGD","file":"pwabuilder-sw.js","sourceRoot":"../src","sourcesContent":["\r\n\r\nconst CACHE = \"pwabuilder-offline\";\r\n\r\n// TODO: replace the following with the correct offline fallback page i.e.: const offlineFallbackPage = \"index.html\";\r\nconst offlineFallbackPage = \"index.html\";\r\n\r\n// Install stage sets up the index page (home page) in the cache and opens a new cache\r\nself.addEventListener(\"install\", function (event) {\r\n  console.log(\"[PWA Builder] Install Event processing\");\r\n\r\n  event.waitUntil(\r\n    caches.open(CACHE).then(function (cache) {\r\n      console.log(\"[PWA Builder] Cached offline page during install\");\r\n\r\n      if (offlineFallbackPage === \"ToDo-replace-this-name.html\") {\r\n        return cache.add(new Response(\"TODO: Update the value of the offlineFallbackPage constant in the serviceworker.\"));\r\n      }\r\n      \r\n      return cache.add(offlineFallbackPage);\r\n    })\r\n  );\r\n});\r\n\r\n// If any fetch fails, it will look for the request in the cache and serve it from there first\r\nself.addEventListener(\"fetch\", function (event) {\r\n  if (event.request.method !== \"GET\") return;\r\n\r\n  event.respondWith(\r\n    fetch(event.request)\r\n      .then(function (response) {\r\n        console.log(\"[PWA Builder] add page to offline cache: \" + response.url);\r\n\r\n        // If request was success, add or update it in the cache\r\n        event.waitUntil(updateCache(event.request, response.clone()));\r\n\r\n        return response;\r\n      })\r\n      .catch(function (error) {        \r\n        console.log(\"[PWA Builder] Network request Failed. Serving content from cache: \" + error);\r\n        return fromCache(event.request);\r\n      })\r\n  );\r\n});\r\n\r\nfunction fromCache(request) {\r\n  // Check to see if you have it in the cache\r\n  // Return response\r\n  // If not in the cache, then return error page\r\n  return caches.open(CACHE).then(function (cache) {\r\n    return cache.match(request).then(function (matching) {\r\n      if (!matching || matching.status === 404) {\r\n        return Promise.reject(\"no-match\");\r\n      }\r\n\r\n      return matching;\r\n    });\r\n  });\r\n}\r\n\r\nfunction updateCache(request, response) {\r\n  return caches.open(CACHE).then(function (cache) {\r\n    return cache.put(request, response);\r\n  });\r\n}\r\n"]}